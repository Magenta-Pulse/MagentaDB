name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: MagentaDB v${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'alpha') }}
        body: |
          ## MagentaDB v${{ steps.get_version.outputs.version }}
          
          ### New Features
          - High-performance searchable encrypted database
          - XChaCha20-Poly1305 encryption with per-field nonces
          - Thread-safe concurrent operations using DashMap
          - Professional CLI with rich formatting and statistics
          - JSON-based persistence with automatic backup
          
          ### Installation
          
          Download the binary for your platform below and make it executable:
          
          ```bash
          # Linux/macOS
          chmod +x magentadb-cli
          ./magentadb-cli --help
          
          # Windows
          magentadb-cli.exe --help
          ```
          
          ### Quick Start
          
          ```bash
          # Insert encrypted data
          magentadb-cli insert user1 name "John Doe"
          
          # Query encrypted data
          magentadb-cli query "John Doe"
          
          # List all documents
          magentadb-cli list
          ```
          
          ### What's Changed
          - Initial release of MagentaDB
          - Core database functionality with encryption
          - Command-line interface
          - Documentation and examples
          
          **Full Changelog**: https://github.com/yourusername/magentadb/commits/v${{ steps.get_version.outputs.version }}

  build:
    name: Build for ${{ matrix.os }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: magentadb-cli
            asset_name: magentadb-cli-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: magentadb-cli.exe
            asset_name: magentadb-cli-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: magentadb-cli
            asset_name: magentadb-cli-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: magentadb-cli
            asset_name: magentadb-cli-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }} --package magentadb-cli

    - name: Strip binary (Linux and macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all --verbose

    - name: Run clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --all-targets --all-features -- -D warnings

    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check